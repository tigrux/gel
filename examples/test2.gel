
(let (a 20 b (/ a 2) c (/ b 2) )
    (define result (+ a b c))
    result
)


(function primes-lesser-than (top)
    (define primes [2])
    (define n 3)
    (function can-divide-n (i)
        (= (% n i) 0)
    )
    (function none-prime (predicate)
        (= (find predicate primes) -1)
    )
    (while (< n top)
        (if (none-prime can-divide-n )
            (append primes n)
        )
        (set n (+ n 2))
    )
    primes
)

(define primes (primes-lesser-than 100))

(function index-of (value values)
    (function equal-to-value (i)
        (= i value)
    )
    (find equal-to-value values)
)

(for iter primes
    (print (str "Primes(" (index-of iter primes) ") = " iter))
)


(print "The first prime is" (get primes 0))
(print "The last prime is" (get primes -1))


(function factorial (n)
    (if (<= n 0)
        1
        (* n (factorial (- n 1)))
    )
)

(define n 10)
(print "Factorial of" n "is" (factorial n))
(print n "is" (if (= (% n 2) 0) "even" "odd"))

(function fibonacci (n)
    (cond
        (= n 0)
            0
        (= n 1)
            1
        #else
            (+ (fibonacci (- n 1))
               (fibonacci (- n 2))
            )
    )
)

(for i (range 10 0)
    (print (str "Fibonacci(" i ") = " (fibonacci i)))
)


(function how-many-days-have? (month)
    (case month
        ("January" "March" "May" "July" "August" "October" "December")
            31
        ("March" "Abril" "June" "September" "November")
            30
        ("February")
            28
        #else
            "No such month"
    )
)

(define month-I-was-born "December")

(print month-I-was-born "has" (how-many-days-have? month-I-was-born) "days")

